.TH "DragonMotorControllerFactory" 3 "Thu Oct 31 2019" "2020 Template Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
DragonMotorControllerFactory
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <DragonMotorControllerFactory\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBMOTOR_TYPE\fP { \fBTALONSRX\fP, \fBBRUSHLESS_SPARK_MAX\fP, \fBBRUSHED_SPARK_MAX\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::shared_ptr< \fBIDragonMotorController\fP > \fBCreateMotorController\fP (std::string mtype, int canID, int pdpID, std::string usage, bool inverted, bool sensorInverted, ctre::phoenix::motorcontrol::FeedbackDevice feedbackDevice, int countsPerRev, float gearRatio, bool brakeMode, int slaveTo, int peakCurrentDuration, int continuousCurrentLimit, int peakCurrentLimit, bool enableCurrentLimit)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBDragonMotorControllerFactory\fP * \fBGetInstance\fP ()"
.br
.in -1c
.SH "Detailed Description"
.PP 
==================================================================================================================================================== Copyright 2019 Lake Orion Robotics FIRST Team 302
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
.PP
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software\&.
.PP
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\&. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
.SH "OR OTHER DEALINGS IN THE SOFTWARE\&."
.PP
======================================================================================================== 
.SH "DragonMotorControllerFactory\&.h"
.PP
File Description: This is the factory for creating Motor Controllers
.PP
.PP
 ======================================================================================================== Class: \fBDragonMotorControllerFactory\fP Description: This is a singleton that creates motor controllers (\fBIDragonMotorController\fP)\&. This allows us to interact with motor controllers such as TalonSRX, Rev Spark Max without 
.SH "actually knowing what type is actually being used\&."
.PP

.PP
Definition at line 54 of file DragonMotorControllerFactory\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBDragonMotorControllerFactory::MOTOR_TYPE\fP"

.PP
 enum: MOTOR_TYPE description: This indicates the type of motor controller\&. Most of our code doesn't need/care about this, however since this is the 
.SS "factory, it is needed when constructing the object\&."

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITALONSRX \fP\fP
.TP
\fB\fIBRUSHLESS_SPARK_MAX \fP\fP
Controller is a Cross the Road Electronics (CTRE) Talon SRX on the CAN network\&. 
.TP
\fB\fIBRUSHED_SPARK_MAX \fP\fP
Controller is a Rev Robotics Spark Max controlling a brushless motor\&. Controller is a Rev Robotics Spark Max conrolling a brushed motor 
.PP
Definition at line 63 of file DragonMotorControllerFactory\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "shared_ptr< \fBIDragonMotorController\fP > DragonMotorControllerFactory::CreateMotorController (std::string mtype, int canID, int pdpID, std::string usage, bool inverted, bool sensorInverted, ctre::phoenix::motorcontrol::FeedbackDevice feedbackDevice, int countsPerRev, float gearRatio, bool brakeMode, int slaveTo, int peakCurrentDuration, int continuousCurrentLimit, int peakCurrentLimit, bool enableCurrentLimit)"
======================================================================================= Method: CreateMotorController Description: Create a motor controller from the inputs Returns: Void 
.PP
\fBParameters\fP
.RS 4
\fIcanID\fP Controller Type 
.br
\fIpdpID\fP CAN ID for the controller 
.br
\fIusage\fP PDP slot the motor is on 
.br
\fIinverted\fP Motor usage (e\&.g\&. Front Left Drive Motor) 
.br
\fIsensorInverted\fP Motor is inverted (positive values make the motor turn in reverse)or not 
.br
\fIfeedbackDevice\fP Sensor direction matches motor direction or not 
.br
\fIcountsPerRev\fP Sensor type 
.br
\fIgearRatio\fP Number of pulses per revolution for the sensor 
.br
\fIbrakeMode\fP Gear ratio (output to input \&.\&.\&. see https://www.wikihow.com/Determine-Gear-Ratio) 
.br
\fIslaveTo\fP brake mode using back emf to resist motion when power is not applied 
.br
\fIpeakCurrentDuration\fP CAN ID of the 'master' motor controller if this is a follower motor controller (-1 indicates it is a master) 
.br
\fIcontinuousCurrentLimit\fP peak current limit 
.br
\fIpeakCurrentLimit\fP continuous current limit 
.br
\fIenableCurrentLimit\fP amount of time the peak current can be achieved before limiting to the continuous current limit enable current limiting or not 
.RE
.PP

.PP
Definition at line 75 of file DragonMotorControllerFactory\&.cpp\&.
.SS "\fBDragonMotorControllerFactory\fP * DragonMotorControllerFactory::GetInstance ()\fC [static]\fP"

.PP
Definition at line 25 of file DragonMotorControllerFactory\&.cpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for 2020 Template Project from the source code\&.
